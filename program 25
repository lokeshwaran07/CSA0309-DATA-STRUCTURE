#include <stdio.h>
#define MAX 30

struct Edge {
    int u, v, w;
};

int parent[MAX];

int find(int i) {
    while (parent[i] != i) i = parent[i];
    return i;
}

void unionSet(int i, int j) { parent[i] = j; }

int main() {
    int n, e;
    struct Edge edges[MAX];

    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &n, &e);

    printf("Enter edges (u v w):\n");
    for (int i = 0; i < e; i++)
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);

    for (int i = 0; i < n; i++) parent[i] = i;

    // sort edges by weight
    for (int i = 0; i < e-1; i++)
        for (int j = i+1; j < e; j++)
            if (edges[i].w > edges[j].w) {
                struct Edge t = edges[i]; edges[i] = edges[j]; edges[j] = t;
            }

    int total = 0;
    printf("Edges in MST:\n");
    for (int i = 0; i < e; i++) {
        int u = find(edges[i].u);
        int v = find(edges[i].v);
        if (u != v) {
            printf("%d - %d (%d)\n", edges[i].u, edges[i].v, edges[i].w);
            total += edges[i].w;
            unionSet(u, v);
        }
    }
    printf("Total cost: %d\n", total);
    return 0;
}
